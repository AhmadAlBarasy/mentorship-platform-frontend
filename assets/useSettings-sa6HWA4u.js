import{H as i,I as a,J as o}from"./index-CJ5LgcXB.js";const n="https://mentorship-platform-api-production.up.railway.app:3000/api/v1",r={getUserProfile:async()=>{const s=await fetch(`${n}/users/me`,{method:"GET",credentials:"include"});if(!s.ok){const e=await s.json();throw new Error(e.message||"Failed to fetch user profile")}return s.json()},updateProfile:async s=>{const e=await fetch(`${n}/users/me`,{method:"PATCH",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify(s)});if(!e.ok){const t=await e.json();throw new Error(t.message||"Failed to update profile")}return e.json()},uploadAvatar:async s=>{const e=await fetch(`${n}/users/me/profile-picture`,{method:"PUT",credentials:"include",body:s});if(!e.ok){const t=await e.json();throw new Error(t.message||"Failed to upload avatar")}return e.json()},deleteAvatar:async()=>{const s=await fetch(`${n}/users/me/profile-picture`,{method:"DELETE",credentials:"include"});if(!s.ok){const e=await s.json();throw new Error(e.message||"Failed to delete avatar")}},getUserLinks:async()=>{const s=await fetch(`${n}/users/me/links`,{method:"GET",credentials:"include"});if(!s.ok){const e=await s.json();throw new Error(e.message||"Failed to fetch user links")}return s.json()},addLink:async s=>{const e=await fetch(`${n}/users/me/links`,{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify(s)});if(!e.ok){const t=await e.json();throw new Error(t.message||"Failed to add link")}return e.json()},updateLink:async(s,e)=>{const t=await fetch(`${n}/users/me/links/${s}`,{method:"PATCH",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify(e)});if(!t.ok){const c=await t.json();throw new Error(c.message||"Failed to update link")}return t.json()},deleteLink:async s=>{if(!s)throw new Error("Link ID is required for deletion");const e=await fetch(`${n}/users/me/links/${s}`,{method:"DELETE",credentials:"include"});if(!e.ok){const t=await e.json();throw console.error("Delete link error response:",t),new Error(t.message||"Failed to delete link")}return e.status==204?{success:!0,message:"Link deleted"}:e.json()},updatePassword:async s=>{const e=await fetch(`${n}/auth/update-password`,{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify(s)});if(!e.ok){const t=await e.json();throw new Error(t.message||"Failed to change password")}return e.json()},toggle2FA:async s=>{const e=await fetch(`${n}/user/2fa`,{method:"PUT",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify({enabled:s})});if(!e.ok){const t=await e.json();throw new Error(t.message||"Failed to toggle 2FA")}return e.json()},getAppConnectionsStates:async()=>{const s=await fetch(`${n}/auth/app-connections`,{method:"GET",headers:{"Content-Type":"application/json"},credentials:"include"});if(!s.ok){const e=await s.json();throw new Error(e.message||"Failed to fetch App connections state")}return s.json()},disconnect:async s=>{const e=await fetch(`${n}/auth/app-connections`,{method:"DELETE",headers:{"Content-Type":"application/json"},body:JSON.stringify({appName:s}),credentials:"include"});if(!e.ok){const t=await e.json();throw new Error(t.message||"Failed to disconnect app")}return e.json()}},d=()=>i({queryKey:["userProfile"],queryFn:r.getUserProfile}),l=()=>{const s=a();return o({mutationFn:r.updateProfile,onSuccess:e=>{s.setQueryData(["currentUser"],t=>({...t,user:{...t.user,...e.user}}))}})},p=()=>{const s=a();return o({mutationFn:r.uploadAvatar,onSuccess:e=>{s.setQueryData(["currentUser"],t=>({...t,user:{...t.user,avatar:e.avatar}}))}})},y=()=>{const s=a();return o({mutationFn:r.deleteAvatar,onSuccess:()=>{s.setQueryData(["currentUser"],e=>({...e,user:{...e.user,avatar:null}}))}})},h=()=>i({queryKey:["userLinks"],queryFn:r.getUserLinks}),w=()=>i({queryKey:["appConnections"],queryFn:r.getAppConnectionsStates}),f=()=>{const s=a();return o({mutationFn:r.addLink,onSuccess:()=>{s.invalidateQueries({queryKey:["userLinks"]})}})},m=()=>{const s=a();return o({mutationFn:({id:e,linkData:t})=>r.updateLink(e,t),onSuccess:()=>{s.invalidateQueries({queryKey:["userLinks"]})}})},k=()=>{const s=a();return o({mutationFn:r.deleteLink,onSuccess:()=>{s.invalidateQueries({queryKey:["userLinks"]})}})},g=()=>o({mutationFn:r.updatePassword}),j=()=>{const s=a();return o({mutationFn:r.toggle2FA,onSuccess:e=>{s.setQueryData(["currentUser"],t=>({...t,user:{...t.user,is_2fa_enabled:e.is_2fa_enabled}}))}})},F=()=>{const s=a();return o({mutationFn:e=>r.disconnect(e),onSuccess:()=>{s.invalidateQueries({queryKey:["appConnections"]})}})};export{m as a,k as b,h as c,d,l as e,p as f,y as g,g as h,j as i,w as j,F as k,f as u};
